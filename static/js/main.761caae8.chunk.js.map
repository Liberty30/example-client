{"version":3,"sources":["test/testAddresses.ts","test/testGraphs.ts","test/testProfiles.ts","services/fakesdk.ts","services/sdk.ts","redux/hooks.ts","redux/slices/userSlice.ts","services/wallets/metamask/ethereum.ts","services/wallets/wallet.ts","services/wallets/metamask/metamask.ts","services/wallets/metamask/index.ts","services/wallets/torus/tweb3.ts","services/wallets/torus/torus.ts","services/wallets/torus/index.ts","components/Login.tsx","components/Header.tsx","components/NewPost.tsx","components/PostList.tsx","components/Feed.tsx","components/ProfileBlock.tsx","App.tsx","serviceWorker.ts","redux/slices/profileSlice.ts","redux/slices/graphSlice.ts","redux/slices/feedSlice.ts","redux/store.ts","index.tsx","test/testhelpers.tsx"],"names":["generateSocialAddress","generateHexString","getPrefabWalletAddress","index","replace","toString","getPrefabSocialAddress","generateRandomGraph","socialAddress","size","following","Array","map","followers","generateProfile","walletAddress","name","preferredUsername","icon","url","actor","discoverable","type","summary","id","createSocialIdentityfromWalletAddress","a","getSocialIdentityfromWalletAddress","getGraphFromSocialIdentity","getProfileFromSocialIdentity","getSocialIdentity","sdk","getGraph","graph","Error","getProfile","profile","useAppSelector","useSelector","initialState","userSlice","createSlice","reducers","userLogin","state","action","payload","wallet","userLogout","userUpdateProfile","userUpdateGraph","actions","ethereum","window","autoRefreshOnNetworkChange","WalletType","mmweb3","Web3","isInstalled","Boolean","isMetaMask","getWalletAddress","request","method","response","result","metamaskWallet","login","metamask","logout","getAddress","getWeb3","torusSettings","popupStyling","theme","isDark","colors","torusBrand1","torusGray2","logoDark","logoLight","web3Torus","web3","torus","initialized","setweb3","provider","web3Inst","this","setProvider","initialize","buildEnv","Torus","init","process","network","host","chainId","Number","networkName","showTorusButton","whiteLabel","verifier","undefined","clearInit","verifiers","enableTorus","getUserInfo","userInfo","getPublicAddress","verifierId","isExtended","typedVerifier","getTypedVerifier","walletAddressHolder","address","untypedVerifier","find","includes","torusWallet","cleanUp","then","sessionStorage","setItem","walletType","TORUS","METAMASK","Login","React","useState","loading","startLoading","alertError","setAlertError","popoverVisible","setPopoverVisible","dispatch","useDispatch","user","className","message","banner","closable","onClose","aria-label","onClick","placement","trigger","visible","onVisibleChange","content","Header","NewPost","PostList","Feed","ProfileBlock","App","location","hostname","match","profiles","Map","profileSlice","setProfile","newProfile","set","removeProfile","delete","graphs","graphSlice","setGraph","newGraph","removeGraph","follow","userAddress","followAddress","targetAddress","get","push","unfollow","unfollowAddress","splice","indexOf","feedSlice","feed","addFeedItem","newFeedItem","addFeedItems","newFeedItems","store","configureStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","prefabFirstNames","prefabLastNames","randImage"],"mappings":"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","file":"static/js/main.761caae8.chunk.js","sourcesContent":["import { HexString } from \"../utilities/types\";\nimport { generateHexString } from \"@unfinishedlabs/test-generators\";\n\n/**\n * Generate a wallet address\n */\nexport const generateWalletAddress = (): HexString => {\n  return generateHexString(40);\n};\n\n/**\n * Generate a social identity address\n */\nexport const generateSocialAddress = (): HexString => {\n  return generateHexString(40);\n};\n\n/**\n * Get a prefabricated wallet address compatible with other prefab data\n * Prefab wallet addres is `0xCODE0000`\n */\nexport const getPrefabWalletAddress = (index: number): HexString => {\n  const regex = /0/gi;\n  const address = \"0x\" + \"CODE0000\".replace(regex, index.toString());\n  return address;\n};\n\n/**\n * Get a prefabricated social identity address compatible with other prefab data\n * Prefab social identity addres is `0xCODE0000`\n */\nexport const getPrefabSocialAddress = (index: number): HexString => {\n  const regex = /0/gi;\n  const address = \"0x\" + \"1DCODE0000\".replace(regex, index.toString());\n  return address;\n};\n","import { Graph, HexString, SocialGraph } from \"../utilities/types\";\nimport { generateSocialAddress, getPrefabSocialAddress } from \"./testAddresses\";\n\nexport const generateRandomGraph = (\n  socialAddress: HexString,\n  size: number = 4\n): Graph => {\n  const following = [...Array(size)].map(() => generateSocialAddress());\n  const followers = [...Array(size)].map(() => generateSocialAddress());\n\n  return {\n    socialAddress,\n    following,\n    followers,\n  };\n};\n\n/**\n * Generate a completely randomized social graph\n * @param size The size of the social graph, `default: 4`\n */\nexport const generateRandomSocialGraph = (\n  socialGraphSize: number = 4,\n  graphSize: number = 4\n): SocialGraph => {\n  // Generate addresses\n  const socialGraph = new Map<HexString, Graph>();\n  for (let i = 0; i < socialGraphSize; i++) {\n    const address = generateSocialAddress();\n    const graph = generateRandomGraph(address, graphSize);\n    socialGraph.set(address, graph);\n  }\n\n  return socialGraph;\n};\n\nconst adr0 = getPrefabSocialAddress(0);\nconst adr1 = getPrefabSocialAddress(1);\nconst adr2 = getPrefabSocialAddress(2);\nconst adr3 = getPrefabSocialAddress(3);\nconst adr4 = getPrefabSocialAddress(4);\nconst adr5 = getPrefabSocialAddress(5);\nconst adr6 = getPrefabSocialAddress(6);\n/**\n * Returns a constant, prefabricated social graph\n * Prefabs are meant to work with other prefab components\n */\nexport const getPreFabSocialGraph = (): SocialGraph => {\n  const socialGraph = new Map<HexString, Graph>([\n    [\n      adr0,\n      {\n        socialAddress: adr0,\n        following: [adr1, adr6],\n        followers: [adr1, adr2],\n      },\n    ],\n    [\n      adr1,\n      {\n        socialAddress: adr1,\n        following: [adr0, adr6],\n        followers: [adr0, adr2],\n      },\n    ],\n    [\n      adr2,\n      {\n        socialAddress: adr2,\n        following: [adr0, adr1, adr3, adr4, adr5, adr6],\n        followers: [],\n      },\n    ],\n    [\n      adr3,\n      {\n        socialAddress: adr3,\n        following: [adr6],\n        followers: [adr2],\n      },\n    ],\n    [\n      adr4,\n      {\n        socialAddress: adr4,\n        following: [adr6, adr5],\n        followers: [adr2],\n      },\n    ],\n    [\n      adr5,\n      {\n        socialAddress: adr5,\n        following: [adr6],\n        followers: [adr2, adr4],\n      },\n    ],\n    [\n      adr6,\n      {\n        socialAddress: adr6,\n        following: [],\n        followers: [adr0, adr1, adr2, adr3, adr4, adr5],\n      },\n    ],\n  ]);\n\n  return socialGraph;\n};\n/**\n * Returns an empty social graph meant to work with prefabs\n */\nexport const getEmptySocialGraph = (): SocialGraph => {\n  const socialGraph = new Map<HexString, Graph>([\n    [adr0, { socialAddress: adr0, following: [], followers: [] }],\n    [adr1, { socialAddress: adr1, following: [], followers: [] }],\n    [adr2, { socialAddress: adr2, following: [], followers: [] }],\n    [adr3, { socialAddress: adr3, following: [], followers: [] }],\n    [adr4, { socialAddress: adr4, following: [], followers: [] }],\n    [adr5, { socialAddress: adr5, following: [], followers: [] }],\n    [adr6, { socialAddress: adr6, following: [], followers: [] }],\n  ]);\n\n  return socialGraph;\n};\n","import { randInt } from \"@unfinishedlabs/test-generators\";\nimport { Profile, HexString } from \"../utilities/types\";\nimport {\n  generateSocialAddress,\n  generateWalletAddress,\n  getPrefabSocialAddress,\n  getPrefabWalletAddress,\n} from \"./testAddresses\";\nimport { prefabFirstNames, prefabLastNames, randImage } from \"./testhelpers\";\n\n/**\n * Generate a complete Profile\n * @param address the address to use with the profile\n * @param name the name for the profile\n * @param preferredUsername the username for the profile\n * @param icon the image/icon to use for the profile\n */\nexport const generateProfile = (\n  walletAddress: HexString,\n  socialAddress: HexString,\n  name?: string,\n  preferredUsername?: string,\n  icon?: string\n): Profile => {\n  return {\n    \"@context\": \"https://www.w3.org/ns/activitystreams\",\n    name: name || \"\",\n    preferredUsername: preferredUsername || \"\",\n    icon: { url: icon || \"\" },\n    walletAddress,\n    socialAddress,\n    actor: socialAddress,\n    discoverable: true,\n    type: \"Person\",\n    summary: \"\",\n    url: \"\",\n    id: \"http://localhost:3003/api/announce/\" + socialAddress,\n  };\n};\n\n/**\n * Generate a random Profile using some prefab\n * names and a generated social address\n */\nexport const generateRandomProfile = (): Profile => {\n  const walletAddress = generateWalletAddress();\n  const socialAddress = generateSocialAddress();\n  const firstName = prefabFirstNames[randInt(prefabFirstNames.length)];\n  const lastName = prefabLastNames[randInt(prefabLastNames.length)];\n  const username =\n    firstName.substring(0, 3) + lastName.substring(0, 3).toLocaleLowerCase();\n  const icon = randImage;\n  return generateProfile(\n    walletAddress,\n    socialAddress,\n    firstName + \" \" + lastName,\n    username,\n    icon\n  );\n};\n\n/**\n * Get one of 7 prefabricated profiles meant\n * to work with other prefab components\n * @param index The index of the profile to grab. `Accepted values: 0-6`\n */\nexport const getPrefabProfile = (index: number): Profile => {\n  return preFabProfiles[index];\n};\n\n/**\n * An array of prefabricated profiles meants to\n * work with other prefab components\n */\nexport const preFabProfiles = [\n  generateProfile(\n    getPrefabWalletAddress(0),\n    getPrefabSocialAddress(0),\n    \"Monday January\",\n    \"0Monday0\",\n    \"https://image.shutterstock.com/image-vector/monday-time-sparkle-shine-word-600w-731826949.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(1),\n    getPrefabSocialAddress(1),\n    \"Tuesday February\",\n    \"1Tuesday1\",\n    \"https://image.shutterstock.com/image-vector/traditional-taco-tuesday-neon-light-600w-1193206603.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(2),\n    getPrefabSocialAddress(2),\n    \"Wednesday March\",\n    \"2Wednesday2\",\n    \"https://image.shutterstock.com/image-vector/wednesday-pop-art-illustration-vector-600w-219333010.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(3),\n    getPrefabSocialAddress(3),\n    \"Thursday April\",\n    \"3Thursday3\",\n    \"https://image.shutterstock.com/image-vector/throwback-thursday-brush-lettering-vector-600w-467925458.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(4),\n    getPrefabSocialAddress(4),\n    \"Friday May\",\n    \"4Friday4\",\n    \"https://image.shutterstock.com/image-vector/friday-loading-concept-vector-illustration-600w-1160548075.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(5),\n    getPrefabSocialAddress(5),\n    \"Saturday June\",\n    \"5Saturday5\",\n    \"https://image.shutterstock.com/image-vector/hello-saturday-typographic-design-vector-600w-394210252.jpg\"\n  ),\n  generateProfile(\n    getPrefabWalletAddress(6),\n    getPrefabSocialAddress(6),\n    \"Sunday July\",\n    \"6Sunday6\",\n    \"https://image.shutterstock.com/image-vector/sunday-funday-hand-written-lettering-600w-1420085606.jpg\"\n  ),\n];\n\nexport const getPrefabProfileByAddress = (\n  address: HexString\n): Profile | null => {\n  for (let i = 0; i < preFabProfiles.length; i++) {\n    const prefabProfile = preFabProfiles[i];\n    if (prefabProfile.socialAddress === address) {\n      return prefabProfile;\n    }\n  }\n  return null;\n};\n","import { generateRandomGraph } from \"../test/testGraphs\";\nimport { generateProfile } from \"../test/testProfiles\";\nimport { Graph, HexString, Profile } from \"../utilities/types\";\n\nexport const createSocialIdentityfromWalletAddress = async (\n  walletAddress: HexString\n): Promise<HexString> => {\n  return walletAddress;\n};\n\nexport const getSocialIdentityfromWalletAddress = async (\n  walletAddress: HexString\n): Promise<HexString> => {\n  return walletAddress;\n};\n\nexport const getGraphFromSocialIdentity = async (\n  socialAddress: HexString\n): Promise<Graph | null> => {\n  return generateRandomGraph(socialAddress);\n};\n\nexport const getProfileFromSocialIdentity = async (\n  socialAddress: HexString\n): Promise<Profile | null> => {\n  return generateProfile(socialAddress, socialAddress);\n};\n","import { Graph, HexString, Profile } from \"../utilities/types\";\nimport * as sdk from \"./fakesdk\";\n\nexport const getSocialIdentity = async (\n  walletAddress: HexString\n): Promise<HexString> => {\n  let socialAddress: HexString = await sdk.getSocialIdentityfromWalletAddress(\n    walletAddress\n  );\n  if (!socialAddress) {\n    socialAddress = await sdk.createSocialIdentityfromWalletAddress(\n      walletAddress\n    );\n  }\n  return socialAddress;\n};\nexport const getGraph = async (socialAddress: HexString): Promise<Graph> => {\n  const graph = await sdk.getGraphFromSocialIdentity(socialAddress);\n  if (!graph) throw new Error(\"Invalid Social Identity Address\");\n  return graph;\n};\n\nexport const getProfile = async (\n  socialAddress: HexString\n): Promise<Profile> => {\n  const profile = await sdk.getProfileFromSocialIdentity(socialAddress);\n  if (!profile) throw new Error(\"Invalid Social Identity Address\");\n  return profile;\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Typed hooks to use instead of useDispatch and useSelector\n\n// Disable explicit module boundaries so that the dispatch types can all be correctly inferred.\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { WalletType } from \"../../services/wallets/wallet\";\nimport { Graph, Profile } from \"../../utilities/types\";\n\ninterface UserState {\n  profile?: Profile;\n  graph?: Graph;\n  wallet?: WalletType;\n}\n\nconst initialState: UserState = {};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    userLogin: (state, action: PayloadAction<UserState>) => {\n      state.profile = action.payload.profile;\n      state.graph = action.payload.graph;\n      state.wallet = action.payload.wallet;\n      return state;\n    },\n    userLogout: (state) => {\n      state = initialState;\n      return state;\n    },\n    userUpdateProfile: (state, action: PayloadAction<Profile>) => {\n      state.profile = action.payload;\n      return state;\n    },\n    userUpdateGraph: (state, action: PayloadAction<Graph>) => {\n      state.graph = action.payload;\n      return state;\n    },\n  },\n});\nexport const {\n  userLogin,\n  userLogout,\n  userUpdateProfile,\n  userUpdateGraph,\n} = userSlice.actions;\nexport default userSlice.reducer;\n","import { JsonRpcPayload, JsonRpcResponse } from \"web3-core-helpers\";\n\ninterface ConnectInfo {\n  chainId: string;\n}\n\ninterface ProviderRpcError extends Error {\n  message: string;\n  code: number;\n  data?: unknown;\n}\n\ninterface ProviderMessage {\n  type: string;\n  data: unknown;\n}\n\ninterface RequestArguments {\n  method: string;\n  params?: unknown[] | Record<string, unknown>;\n  from?: string;\n}\n\ninterface Callback<ResultType> {\n  (error: Error): void;\n  (error: null, val: ResultType): void;\n}\n\nexport interface EthereumProvider {\n  isMetaMask?: boolean;\n  autoRefreshOnNetworkChange: boolean;\n  chainId: number;\n\n  isConnected(): boolean;\n\n  on(event: \"accountsChanged\", handler: (addresses: string[]) => void): void;\n  on(event: \"chainChanged\", handler: (chainId: string) => void): void;\n  on(event: \"connect\", handler: (connectInfo: ConnectInfo) => void): void;\n  on(event: \"disconnect\", handler: (error: ProviderRpcError) => void): void;\n  on(event: \"message\", handler: (message: ProviderMessage) => void): void;\n\n  request(request: RequestArguments): Promise<any>;\n\n  sendAsync(\n    payload: JsonRpcPayload,\n    callback: (error: Error | null, result?: JsonRpcResponse) => void\n  ): void;\n  send(payload: JsonRpcPayload, callback: Callback<JsonRpcResponse>): any;\n}\n// eip-1193\nconst ethereum = (window as any).ethereum as\n  | EthereumProvider\n  | null\n  | undefined;\n\nif (ethereum) (ethereum as EthereumProvider).autoRefreshOnNetworkChange = false;\n\nexport default ethereum;\n","import { HexString } from \"../../utilities/types\";\nimport metamaskWallet from \"./metamask\";\nimport torusWallet from \"./torus\";\nimport Web3 from \"web3\";\n\n// HOW TO ADD A WALLET\n// Add the new wallet to the enum and switch/case\n// Both places are marked with a comment\n// Then, create a Folder for the new wallet with it's implementation\n// code. create an index.ts file in the folder that implements\n// the Wallet interface below. Look at torus or metamask for\n// an example.\n\nexport enum WalletType {\n  TORUS = \"TORUS\",\n  METAMASK = \"METAMASK\",\n  // Add new WalletTypes Here\n}\n\nexport const wallet = (walletType: WalletType): Wallet => {\n  switch (walletType) {\n    case WalletType.TORUS:\n      return torusWallet;\n    case WalletType.METAMASK:\n      return metamaskWallet;\n    // Add new WalletTypes Here\n  }\n};\n\nexport interface Wallet {\n  login: () => Promise<HexString>;\n  logout: () => void;\n  getAddress: () => Promise<HexString>;\n  getWeb3: () => Web3;\n}\n","import Web3 from \"web3\";\nimport { HexString } from \"../../../utilities/types\";\nimport ethereum, { EthereumProvider } from \"./ethereum\";\n\nconst mmweb3 = new Web3(ethereum as EthereumProvider);\n\nexport const getWeb3 = (): Web3 => {\n  if (!isInstalled()) throw new Error(\"Metamask not installed\");\n  return mmweb3;\n};\n\nexport const isInstalled = (): boolean => {\n  return Boolean(ethereum?.isMetaMask);\n};\n\nexport const getWalletAddress = async (): Promise<HexString> => {\n  const response = await ethereum?.request({ method: \"eth_requestAccounts\" });\n  if (!response) throw new Error(\"Metamask not installed\");\n  return response.result ? response.result[0] : response[0];\n};\n","import * as metamask from \"./metamask\";\nimport { Wallet } from \"../wallet\";\n\nconst metamaskWallet: Wallet = {\n  login: async () => {\n    if (!metamask.isInstalled()) throw new Error(\"Metamask not installed\");\n    return metamask.getWalletAddress();\n  },\n  logout: () => {\n    return;\n  },\n  getAddress: async () => {\n    return metamask.getWalletAddress();\n  },\n  getWeb3: () => {\n    return metamask.getWeb3();\n  },\n};\n\nexport default metamaskWallet;\n","import Web3 from \"web3\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport { provider } from \"web3-core\";\n\nexport type BuildEnvironment =\n  | \"production\"\n  | \"development\"\n  | \"binance\"\n  | \"testing\"\n  | \"lrc\"\n  | \"beta\"\n  | undefined;\n\n// interface TorusCtorArgs in torus-embeded types\nconst torusSettings = {\n  //buttonPosition?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left'\n  //modalZIndex?: number\n  //apiKey?: string\n};\n\n// interface WhiteLabelParams in torus-embeded types\n// example data structure here: https://github.com/torusresearch/torus-embed/blob/master/examples/vue-app/src/data.js\nconst popupStyling = {\n  theme: {\n    isDark: false,\n    colors: {\n      torusBrand1: \"#000000\",\n      torusGray2: \"#FBF7F3\",\n    },\n  },\n  logoDark: \"https://avatars.githubusercontent.com/u/78103996?s=200&v=4\",\n  logoLight: \"https://avatars.githubusercontent.com/u/78103996?s=200&v=4\",\n  //topupHide?: boolean\n  //featuredBillboardHide?: boolean\n  //disclaimerHide?: boolean\n  //tncLink?: LocaleLinks<string>\n  //privacyPolicy?: LocaleLinks<string>\n  //contactLink?: LocaleLinks<string>\n  //customTranslations?: LocaleLinks<any>\n};\n\n// interface TorusParams in trous-embeded types\nconst initSettings = (buildEnv: BuildEnvironment) => {\n  return {\n    buildEnv:\n      (process.env.REACT_APP_TORUS_BUILD_ENV as BuildEnvironment) ||\n      buildEnv ||\n      \"production\",\n    network: {\n      host: process.env.REACT_APP_CHAIN_HOST || \"http://localhost:7545\",\n      chainId: Number(process.env.REACT_APP_CHAIN_ID) || 1337,\n      networkName: process.env.REACT_APP_CHAIN_NAME || \"Localchain\",\n    },\n    showTorusButton: true,\n    whiteLabel: popupStyling,\n  };\n};\n\nconst web3Torus = {\n  web3: new Web3(),\n  torus: null as Torus | null,\n  initialized: false,\n  setweb3: function (provider: provider): void {\n    const web3Inst = new Web3(provider);\n    web3Torus.web3 = web3Inst;\n    this.web3.setProvider(provider);\n  },\n  initialize: async function (buildEnv: BuildEnvironment): Promise<void> {\n    const torus = new Torus(torusSettings);\n    await torus.init(initSettings(buildEnv));\n    this.initialized = true;\n    try {\n      await torus.login({ verifier: undefined });\n      web3Torus.setweb3(torus.provider);\n      web3Torus.torus = torus;\n    } catch (error) {\n      torus.clearInit();\n      this.initialized = false;\n      throw new Error(\"Login Cancelled\");\n    }\n  },\n};\n\nexport default web3Torus;\n","import Web3 from \"web3\";\nimport { HexString } from \"../../../utilities/types\";\nimport web3Torus, { BuildEnvironment } from \"./tweb3\";\n\n// Torus doesn't give us access to their internal verifier types\n// They also don't enforce their own verifier system consistently\n// This means we need to create our own and update it.\n// This verifiers array is our list of approved verifiers based\n// off their internal list. That list can be found here:\n// https://github.com/torusresearch/torus-embed/blob/master/types/embed.d.ts\nconst verifiers = [\"google\", \"reddit\", \"discord\"] as const;\ntype VerifierTypes = typeof verifiers[number];\ntype AddressType = undefined | string | { address: string };\n\ninterface UserInfo {\n  email: string;\n  name: string;\n  profileImage: string;\n  verifier: string;\n  verifierId: string;\n}\n\nexport const enableTorus = async (\n  buildEnv?: BuildEnvironment\n): Promise<void> => {\n  await web3Torus.initialize(buildEnv || \"production\");\n};\n\nexport const isInitialized = (): boolean => {\n  return web3Torus.initialized;\n};\n\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  const userInfo = await web3Torus.torus?.getUserInfo(\n    \"This site is requesting your information\"\n  );\n  if (!userInfo) throw new Error(\"Unable to find user's info\");\n  return userInfo;\n};\n\nexport const logout = (): void => {\n  web3Torus.torus?.cleanUp().then(() => {\n    sessionStorage.setItem(\"pageUsingTorus\", \"false\");\n  });\n};\n\nexport const getPublicAddress = async (\n  verifier: VerifierTypes,\n  verifierId: string\n): Promise<AddressType> => {\n  return await web3Torus.torus?.getPublicAddress({\n    verifier,\n    verifierId,\n    isExtended: true,\n  });\n};\n\nexport const getWalletAddress = async (): Promise<HexString> => {\n  const { verifier, verifierId } = await getUserInfo();\n  const typedVerifier: VerifierTypes = getTypedVerifier(verifier);\n  const walletAddressHolder = await getPublicAddress(typedVerifier, verifierId);\n  if (!walletAddressHolder) throw new Error(\"No Wallet Address found for User\");\n  if (typeof walletAddressHolder === \"string\") return walletAddressHolder;\n  return walletAddressHolder.address;\n};\n\nconst getTypedVerifier = (untypedVerifier: string): VerifierTypes => {\n  const typedVerifier = verifiers.find((verifier) => {\n    return untypedVerifier.includes(verifier);\n  });\n\n  if (!typedVerifier) throw new Error(\"Unknown Verifier\");\n  return typedVerifier as VerifierTypes;\n};\n\nexport const getWeb3 = (): Web3 => {\n  return web3Torus.web3;\n};\n","import * as torus from \"./torus\";\nimport { Wallet } from \"../wallet\";\n\nconst torusWallet: Wallet = {\n  login: async () => {\n    await torus.enableTorus();\n    return await torus.getWalletAddress();\n  },\n  logout: () => {\n    if (torus.isInitialized()) {\n      torus.logout();\n    }\n  },\n  getAddress: async () => {\n    return await torus.getWalletAddress();\n  },\n  getWeb3: () => {\n    return torus.getWeb3();\n  },\n};\n\nexport default torusWallet;\n","import React from \"react\";\nimport { Alert, Button, Popover, Spin } from \"antd\";\nimport * as sdk from \"../services/sdk\";\nimport { useAppDispatch, useAppSelector } from \"../redux/hooks\";\nimport { userLogin, userLogout } from \"../redux/slices/userSlice\";\nimport { wallet, WalletType } from \"../services/wallets/wallet\";\n\nconst Login = (): JSX.Element => {\n  const [loading, startLoading] = React.useState<boolean>(false);\n  const [alertError, setAlertError] = React.useState<string>(\"\");\n  const [popoverVisible, setPopoverVisible] = React.useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n  const profile = useAppSelector((state) => state.user.profile);\n  const walletType = useAppSelector((state) => state.user.wallet);\n\n  const login = async (walletType: WalletType) => {\n    if (loading) return;\n    startLoading(true);\n    try {\n      const walletAddress = await wallet(walletType).login();\n      const socialAddress = await sdk.getSocialIdentity(walletAddress);\n      const profile = await sdk.getProfile(socialAddress);\n      const graph = await sdk.getGraph(socialAddress);\n      dispatch(userLogin({ profile, graph, wallet: walletType }));\n      startLoading(false);\n    } catch (error) {\n      setAlertError(error.toString());\n    }\n    startLoading(false);\n    setPopoverVisible(false);\n  };\n\n  const logout = () => {\n    if (walletType) wallet(walletType).logout();\n    dispatch(userLogout());\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setPopoverVisible(visible);\n  };\n\n  return (\n    <div className=\"Login__block\">\n      {alertError && (\n        <Alert\n          className=\"Login__alert\"\n          type=\"error\"\n          message={alertError}\n          banner\n          closable={true}\n          onClose={() => setAlertError(\"\")}\n        />\n      )}\n      {!profile ? (\n        <Popover\n          placement=\"bottomRight\"\n          trigger=\"click\"\n          visible={popoverVisible}\n          onVisibleChange={handleVisibleChange}\n          content={\n            <div className=\"Login__loginOptions\">\n              <Button\n                className=\"Login__loginTorus\"\n                onClick={() => login(WalletType.TORUS)}\n              >\n                Torus\n              </Button>\n              <Button\n                className=\"Login__loginMetamask\"\n                onClick={() => login(WalletType.METAMASK)}\n              >\n                MetaMask\n              </Button>\n            </div>\n          }\n        >\n          <Button className=\"Login__loginButton\" aria-label=\"Login\">\n            Log In\n            {loading && <Spin className=\"Login__spinner\" size=\"small\" />}\n          </Button>\n        </Popover>\n      ) : (\n        <Button\n          className=\"Login__logOutButton\"\n          aria-label=\"Logout\"\n          onClick={logout}\n        >\n          Log Out\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport Login from \"./Login\";\n\nconst Header = (): JSX.Element => {\n  return (\n    <div className=\"Header__block\">\n      <h1 className=\"Header__title\">Example Client</h1>\n      <Login />\n    </div>\n  );\n};\nexport default Header;\n","import React from \"react\";\n\nconst NewPost: React.FC = () => {\n  return (\n    <>\n      <button>New Post</button>\n    </>\n  );\n};\nexport default NewPost;\n","import React from \"react\";\n\nconst PostList: React.FC = () => {\n  return (\n    <div className=\"PostList__block\">\n      <h1>PostList</h1>\n    </div>\n  );\n};\nexport default PostList;\n","import React from \"react\";\nimport NewPost from \"./NewPost\";\nimport PostList from \"./PostList\";\n\nconst Feed: React.FC = () => {\n  return (\n    <div className=\"Feed__block\">\n      <div className=\"Feed__header\">\n        <h1>Feed</h1>\n        <NewPost />\n      </div>\n      <PostList />\n    </div>\n  );\n};\nexport default Feed;\n","import React from \"react\";\nimport { useAppSelector } from \"../redux/hooks\";\n\nconst ProfileBlock = (): JSX.Element => {\n  const profile = useAppSelector((state) => state.user.profile);\n\n  return (\n    <div className=\"Profile__block\">\n      <h1>Profile</h1>\n      <div>Wallet Address: {profile?.walletAddress}</div>\n      <div>Social Address: {profile?.socialAddress}</div>\n      <div>Profile Name: {profile?.name || \"null\"}</div>\n    </div>\n  );\n};\nexport default ProfileBlock;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.scss\";\nimport \"antd/dist/antd.less\";\nimport Header from \"./components/Header\";\nimport Feed from \"./components/Feed\";\nimport ProfileBlock from \"./components/ProfileBlock\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <main className=\"App__content\">\n          <Feed />\n          <ProfileBlock />\n        </main>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { HexString, Profile } from \"../../utilities/types\";\n\ninterface profileState {\n  profiles: Map<HexString, Profile>;\n}\n\nconst initialState: profileState = {\n  profiles: new Map<HexString, Profile>(),\n};\n\nexport const profileSlice = createSlice({\n  name: \"profiles\",\n  initialState,\n  reducers: {\n    setProfile: (state, action: PayloadAction<Profile>) => {\n      const newProfile = action.payload;\n      state.profiles.set(newProfile.socialAddress, newProfile);\n      return state;\n    },\n    removeProfile: (state, action: PayloadAction<HexString>) => {\n      state.profiles.delete(action.payload);\n      return state;\n    },\n  },\n});\nexport const { setProfile, removeProfile } = profileSlice.actions;\nexport default profileSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { HexString, Graph } from \"../../utilities/types\";\n\ninterface graphState {\n  graphs: Map<HexString, Graph>;\n}\n\nconst initialState: graphState = {\n  graphs: new Map<HexString, Graph>(),\n};\n\ninterface AddressHolder {\n  userAddress: HexString;\n  targetAddress: HexString;\n}\n\nexport const graphSlice = createSlice({\n  name: \"graphs\",\n  initialState,\n  reducers: {\n    setGraph: (state, action: PayloadAction<Graph>) => {\n      const newGraph = action.payload;\n      state.graphs.set(newGraph.socialAddress, newGraph);\n      return state;\n    },\n    removeGraph: (state, action: PayloadAction<HexString>) => {\n      const socialAddress = action.payload;\n      state.graphs.delete(socialAddress);\n      return state;\n    },\n    follow: (state, action: PayloadAction<AddressHolder>) => {\n      const socialAddress = action.payload.userAddress;\n      const followAddress = action.payload.targetAddress;\n      state.graphs.get(socialAddress)?.following.push(followAddress);\n      state.graphs.get(followAddress)?.followers.push(socialAddress);\n      return state;\n    },\n    unfollow: (state, action: PayloadAction<AddressHolder>) => {\n      const socialAddress = action.payload.userAddress;\n      const unfollowAddress = action.payload.targetAddress;\n      const following = state.graphs.get(socialAddress)?.following;\n      const followers = state.graphs.get(unfollowAddress)?.followers;\n      following?.splice(following.indexOf(unfollowAddress));\n      followers?.splice(followers.indexOf(socialAddress));\n      return state;\n    },\n  },\n});\nexport const { setGraph, removeGraph, follow, unfollow } = graphSlice.actions;\nexport default graphSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FeedItem } from \"../../utilities/types\";\n\ninterface feedState {\n  feed: FeedItem[];\n}\n\nconst initialState: feedState = {\n  feed: [],\n};\n\nexport const feedSlice = createSlice({\n  name: \"feed\",\n  initialState,\n  reducers: {\n    addFeedItem: (state, action: PayloadAction<FeedItem>) => {\n      const newFeedItem = action.payload;\n      return {\n        ...state,\n        feed: [...state.feed, newFeedItem],\n      };\n    },\n    addFeedItems: (state, action: PayloadAction<FeedItem[]>) => {\n      const newFeedItems = action.payload;\n      return {\n        ...state,\n        feed: [...state.feed, ...newFeedItems],\n      };\n    },\n  },\n});\nexport const { addFeedItem, addFeedItems } = feedSlice.actions;\nexport default feedSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userSlice from \"./slices/userSlice\";\nimport profileSlice from \"./slices/profileSlice\";\nimport graphSlice from \"./slices/graphSlice\";\nimport feedSlice from \"./slices/feedSlice\";\n\nconst store = configureStore({\n  reducer: {\n    user: userSlice,\n    profiles: profileSlice,\n    graphs: graphSlice,\n    feed: feedSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Store } from \"@reduxjs/toolkit\";\nimport configureStore from \"redux-mock-store\";\nimport { ComponentType, ReactElement } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n/**\n * Using this to spy on promise functions in Jest\n * this will immediately flush the message queue\n * so all pending promises will be executed\n */\nexport const flushPromises = (): Promise<any> => {\n  return new Promise((resolve) => setImmediate(resolve));\n};\n\n/**\n * Force promises in tests to resolve and runs all timers\n * **NOTE:** This function enables fake timers `jest.useFakeTimers()`\n */\nexport const forcePromiseResolve = async (): Promise<void> => {\n  jest.useFakeTimers();\n  await act(async () => {\n    new Promise((resolve) => setTimeout(resolve, 0));\n    jest.runAllTimers();\n  });\n};\n\nexport const componentWithStore = (\n  Component: ComponentType,\n  store: Store,\n  props = {}\n): ReactElement => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Component {...props} />\n      </Router>\n    </Provider>\n  );\n};\n\nexport const createMockStore = (initialState: unknown): any => {\n  return configureStore()(initialState);\n};\n\n/**\n * Mock some key functions to fix the test not\n * being a web3 enabled browser. Using this\n * means you may have to mock some return values\n */\nexport const mockWeb3EnabledBrowser = (): void => {\n  jest.mock(\"../services/ethereum.ts\", () => jest.fn());\n  jest.mock(\"../services/ens.js\", () => jest.fn());\n  jest.mock(\"../services/env.ts\", () => jest.fn());\n};\n\n/**\n * Set the mock return values for getParams. Used for\n * mocking URL params\n * @param params the params to mock. **example:** `{ key: value }`\n */\nexport const mockReactRouterParams = (mockParams: unknown): void => {\n  jest.mock(\"react-router\", () => ({\n    useParams: jest.fn().mockReturnValue(mockParams),\n  }));\n};\n\n/**\n * Array of prefabricated first names for use in creating profiles\n */\nexport const prefabFirstNames = [\n  \"Tom\",\n  \"Bob\",\n  \"Scott\",\n  \"Duncan\",\n  \"Frank\",\n  \"Elvis\",\n  \"Josh\",\n  \"Kevin\",\n  \"Cathy\",\n  \"Karen\",\n  \"Mary\",\n  \"Beth\",\n  \"Sheril\",\n  \"Mackenzie\",\n  \"Katie\",\n  \"Sarah\",\n  \"Elizabeth\",\n  \"Maria\",\n];\n\n/**\n * Array of prefabricated last names for use in creating profiles\n */\nexport const prefabLastNames = [\n  \"Smith\",\n  \"Peterson\",\n  \"Sullivan\",\n  \"Myers\",\n  \"Cooper\",\n  \"Williams\",\n  \"Carter\",\n  \"Young\",\n  \"Morgan\",\n  \"King\",\n  \"Ward\",\n  \"Foster\",\n  \"Evans\",\n  \"Davis\",\n  \"Turner\",\n  \"Sanchez\",\n];\n\n/**\n * Generates a different picture everytime\n */\nexport const randImage = \"https://picsum.photos/200/300\";\n\n/**\n * An array of prefabricated messages for use in testing content posts.\n */\n//I apologize, I had a lot of fun writing these.\nexport const prefabMessages = [\n  \"Hello World\",\n  \"My favorite cartoon is Spongebob\",\n  \"2020 is terrible\",\n  \"Go sports team! Dunk the goal!\",\n  \"I am going to the mall tomorrow\",\n  \"Leave me alone I am the grumpiest person\",\n  \"This is the way\",\n  \"Who's on first, what's on Second, I don't know is on third\",\n  \"Beam me up Scotty.\",\n  \"The pizza shop down the street is giving out free donuts. Kinda sketchy\",\n  \"My birthday is comming up in a little under a month!\",\n  \"I want everyone to know that dogs > cats\",\n  \"Hot take: Hotdogs aren't a sandwich, they're a taco\",\n  // Uncle Iroh quotes\n  \"It is time for you to look inward, and start asking \" +\n    \"yourself the big questions. Who are you? And what do \" +\n    \"you want?\",\n  \"Sometimes life is like this dark tunnel. You can’t always \" +\n    \"see the light at the end of the tunnel, but if you just \" +\n    \"keep moving, you will come to a better place.\",\n  // The Tradegdy of Dark Plagueis the Wise\n  \"Did you ever hear the tragedy of Darth Plagueis the Wise? \" +\n    \"I thought not. It's not a story the Jedi would tell you. \" +\n    \"It's a Sith legend. Darth Plagueis was a Dark Lord of the \" +\n    \"Sith, so powerful and so wise he could use the Force to \" +\n    \"influence the midichlorians to create life... He had such \" +\n    \"a knowledge of the dark side that he could even keep the \" +\n    \"ones he cared about from dying. The dark side of the Force \" +\n    \"is a pathway to many abilities some consider to be unnatural. \" +\n    \"He became so powerful... the only thing he was afraid of was \" +\n    \"losing his power, which eventually, of course, he did. \" +\n    \"Unfortunately, he taught his apprentice everything he knew, \" +\n    \"then his apprentice killed him in his sleep. It's ironic he \" +\n    \"could save others from death, but not himself.\",\n];\n"],"sourceRoot":""}